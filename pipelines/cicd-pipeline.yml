trigger:
- none

stages:

#
# Create infrastructure with terraform
#
- stage: Infrastructure
  displayName: 'Create infrasturcture'

  jobs:
  - job: Create

    pool:
      vmImage: 'ubuntu-latest'

    variables:
      tf_core_infrastructure_path: '$(System.DefaultWorkingDirectory)/deployment/azure/core'

    steps:
    # Add tf state backend
    - task: AzureCLI@2
      displayName: Add terraform remote state backend
      inputs:
        azureSubscription: 'AzureServiceConnection'
        scriptType: 'bash'
        scriptLocation: 'scriptPath'
        scriptPath: 'deployment/azure/scripts/create_backend_resources.sh'

    # Install terraform
    - task: TerraformInstaller@0
      displayName: Install Terraform
      inputs:
        terraformVersion: '0.14.7'

    # Terraform init with backend
    - task: TerraformTaskV1@0
      displayName: Terraform init
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(tf_core_infrastructure_path)'
        backendServiceArm: 'AzureServiceConnection'
        backendAzureRmResourceGroupName: 'architecture_demo_backend'
        backendAzureRmStorageAccountName: 'account010'
        backendAzureRmContainerName: 'container'
        backendAzureRmKey: 'core.tfstate'
        
    # Terraform plan and save output
    - task: TerraformTaskV1@0
      displayName: Terraform plan
      inputs:
        provider: 'azurerm'
        command: 'plan'
        workingDirectory: '$(tf_core_infrastructure_path)'
        commandOptions: '-out=tfplan'
        environmentServiceNameAzureRM: 'AzureServiceConnection'

    # Terraform apply
    - task: TerraformTaskV1@0
      displayName: Terraform apply
      name: TerraformApply
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(tf_core_infrastructure_path)'
        commandOptions: 'tfplan'
        environmentServiceNameAzureRM: 'AzureServiceConnection'
    
    # Save AKS config
    - bash: |
        aks_kube_config=$(cat $(TerraformApply.jsonOutputVariablesPath) | jq '.aks_kube_config.value' -r)
        mkdir -p $(Pipeline.Workspace)/variables
        echo "$aks_kube_config" > $(Pipeline.Workspace)/variables/aks_kube_config
      name: Outputs
      displayName: Set Terraform output variables

    # Publish the folder as pipeline artifact
    - publish: $(Pipeline.Workspace)/variables
      artifact: variables
      displayName: Publish artifacts

#
# Run tests with VSTest task
#
- stage: 'Test'
  displayName: 'Run test automation'
  dependsOn: Infrastructure

  jobs:
  - job: Test
    variables:
      solution: 'backend/Backend.sln'
      buildPlatform: 'Any CPU'
      buildConfiguration: 'Release'
      
    pool:
      vmImage: 'windows-latest'

    steps:

    - task: NuGetToolInstaller@1
      displayName: Install nuget packages

    - task: NuGetCommand@2
      displayName: Restore solution nuget packages
      inputs:
        restoreSolution: '$(solution)'

    - task: VSBuild@1
      displayName: Build solution
      inputs:
        solution: '$(solution)'
        platform: '$(buildPlatform)'
        configuration: '$(buildConfiguration)'

    - task: VSTest@2
      displayName: "Run solution unit tests"
      inputs:
        testSelector: 'testAssemblies'
        testAssemblyVer2: |
          **\CustomerApi.*Test.dll
          **\OrderApi.*Test.dll
          !**\*TestAdapter.dll
          !**\obj\**
          !**\ref\**
        searchFolder: '$(System.DefaultWorkingDirectory)\backend'
        runTestsInIsolation: true
        codeCoverageEnabled: true
        platform: '$(buildPlatform)'
        configuration: '$(buildConfiguration)'

#
# Run tests with DotNetCoreCLI task
#
# - stage: 'Test'
#   displayName: 'Run test automation'
#   dependsOn: Infrastructure

#   jobs:
#   - job:
#     variables:
#       customer_api_test: backend/CustomerApi/Tests/CustomerApi.Application.Test/CustomerApi.Application.Test.csproj
#       order_api_test: backend/OrderApi/Tests/OrderApi.Application.Test/OrderApi.Application.Test.csproj

#     pool:
#       vmImage: 'ubuntu-latest'

#     steps:

#     - task: DotNetCoreCLI@2
#       displayName: CustomerApi unit test
#       inputs:
#         command: 'test'
#         projects: '$(customer_api_test)'
#         testRunTitle: 'CustomerApi Unit Test'      

#     - task: DotNetCoreCLI@2
#       displayName: OrderApi unit test Run
#       inputs:
#         command: 'test'
#         projects: '$(order_api_test)'
#         testRunTitle: 'OrderApi Unit Test'
#       condition: succeededOrFailed()
    
#
# Build code, create docker images and push to ACR
#
- stage: 'Build'
  displayName: 'Build and push to ACR'
  dependsOn: Test
  condition: succeeded()

  jobs:
  - job: Build

    pool:
      vmImage: 'ubuntu-latest'

    steps:

    - task: DockerInstaller@0
      displayName: Install docker
      inputs:
        dockerVersion: '17.09.0-ce'

    - task: AzureCLI@2
      displayName: Build and push docker images to ACR 
      inputs:
        azureSubscription: 'AzureServiceConnection'
        scriptType: 'bash'
        scriptLocation: 'scriptPath'
        scriptPath: '$(System.DefaultWorkingDirectory)/deployment/azure/scripts/build_and_push_acr.sh'

#
# Pull images from ACR and deploy with Terraform Kubernetes provider
#
- stage: 'Deploy'
  displayName: 'Deploy to Azure'
  dependsOn: Build

  jobs:
  - deployment: Deploy
    pool:
      vmImage: 'ubuntu-latest'

    variables:
      tf_k8s_path: '$(System.DefaultWorkingDirectory)/deployment/azure/k8s'

    environment: Prod

    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
            persistCredentials: true

          # Download the artifacts
          - download: current
            artifact: variables
            displayName: Download artifacts

          # Create Terraform config file for K8S
          - bash: |
              aks_kube_config=$(cat $(Pipeline.Workspace)/variables/aks_kube_config)
              echo $aks_kube_config
              echo "$aks_kube_config" > $(tf_k8s_path)/kube_config              
            displayName: Set artifacts to variables

          # Print config file content
          - bash: |
              cat $(tf_k8s_path)/kube_config
            displayName: Debug print config file content  

          # Install terraform
          - task: TerraformInstaller@0
            displayName: Install Terraform
            inputs:
              terraformVersion: '0.14.7'

          # Terraform init with backend
          - task: TerraformTaskV1@0
            displayName: Terraform init
            inputs:
              provider: 'azurerm'
              command: 'init'
              workingDirectory: '$(tf_k8s_path)'
              backendServiceArm: 'AzureServiceConnection'
              backendAzureRmResourceGroupName: 'architecture_demo_backend'
              backendAzureRmStorageAccountName: 'account010'
              backendAzureRmContainerName: 'container'
              backendAzureRmKey: 'k8s.tfstate'
              
          # Terraform plan and save output
          - task: TerraformTaskV1@0
            displayName: Terraform plan
            inputs:
              provider: 'azurerm'
              command: 'plan'
              workingDirectory: '$(tf_k8s_path)'
              commandOptions: '-out=tfplan'
              environmentServiceNameAzureRM: 'AzureServiceConnection'

          # Terraform apply Kubernetes services
          - task: TerraformTaskV1@0
            displayName: Terraform apply
            name: TerraformApply
            inputs:
              provider: 'azurerm'
              command: 'apply'
              workingDirectory: '$(tf_k8s_path)'
              commandOptions: 'tfplan'
              environmentServiceNameAzureRM: 'AzureServiceConnection'