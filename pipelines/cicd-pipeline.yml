trigger:
- none

stages:

#
# Create infrastructure with terraform
#
- stage: Infrastructure
  displayName: 'Create infrasturcture'

  jobs:
  - job: Create

    pool:
      vmImage: 'ubuntu-latest'

    variables:
      tf_var_file_path: '$(System.DefaultWorkingDirectory)/deployment/azure/terraform.tfvars'
      tf_base_infrastructure_path: '$(System.DefaultWorkingDirectory)/deployment/azure/cluster'

    steps:
    
    # Install terraform
    - task: TerraformInstaller@0
      inputs:
        terraformVersion: '0.14.7'

    # Terraform init with backend
    - task: TerraformTaskV1@0
      displayName: Terraform init
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(tf_base_infrastructure_path)'
        backendServiceArm: 'AzureServiceConnection'
        backendAzureRmResourceGroupName: 'architecture_demo_tfstate_rg'
        backendAzureRmStorageAccountName: 'tfstate000'
        backendAzureRmContainerName: 'tfstate-container'
        backendAzureRmKey: 'terraform.tfstate'
        
    # Terraform plan and save output
    - task: TerraformTaskV1@0
      displayName: Terraform plan
      inputs:
        provider: 'azurerm'
        command: 'plan'
        workingDirectory: '$(tf_base_infrastructure_path)'
        commandOptions: '-var-file $(tf_var_file_path) -out=tfplan'
        environmentServiceNameAzureRM: 'AzureServiceConnection'

    # Terraform apply
    - task: TerraformTaskV1@0
      displayName: Terraform apply
      name: TerraformApply
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(tf_base_infrastructure_path)'
        commandOptions: 'tfplan'
        environmentServiceNameAzureRM: 'AzureServiceConnection'
    
    # Save ACR and AKS address
    - bash: |
        ACR_LOGIN_SERVER=$(cat $(TerraformApply.jsonOutputVariablesPath) | jq '.acr_login_server.value' -r)
        AKS_HOST=$(cat $(TerraformApply.jsonOutputVariablesPath) | jq '.aks_host.value' -r)
        echo "##vso[task.setvariable variable=acr_login_server;isOutput=true]$ACR_LOGIN_SERVER"
        echo "##vso[task.setvariable variable=aks_host;isOutput=true]$AKS_HOST"
      name: Outputs
      displayName: Set Terraform output variables

#
# Run tests
#
#- stage: 'Infrastructure'
#  displayName: 'Run test automation'
#  dependsOn: Build
#
#  jobs:
#  - job:
#
#    pool:
#      vmImage: 'ubuntu-latest'
#
#    steps:

#
# Build code, create docker images and push to ACR
#
- stage: 'Build'
  displayName: 'Build and push to ACR'
  dependsOn: Test

  jobs:
  - job: Build
    variables:
      acr_login_server: $[stageDependencies.Infrastructure.Create.outputs['Outputs.acr_login_server'] ]
      aks_host: $[stageDependencies.Infrastructure.Create.outputs['Outputs.aks_host'] ]
      customer_api_image_name: '$(acr_login_server)/customer-api:$(Build.BuildId)'  
      order_api_image_name: '$(acr_login_server)/order-api:$(Build.BuildId)'  
      frontend_Image_name: '$(acr_login_server)/frontend:$(Build.BuildId)'  

    pool:
      vmImage: 'ubuntu-latest'

    steps:
    - bash: |
        echo $(acr_login_server)
        echo $(aks_host)
        echo $(customer_api_image_name)
        echo $(order_api_image_name)
        echo $(frontend_Image_name)
      displayName: Show variables for debug

    - task: DockerInstaller@0
      inputs:
        dockerVersion: '17.09.0-ce'

    - task: AzureCLI@2
      displayName: Build and push docker images to ACR 
      inputs:
        azureSubscription: 'AzureServiceConnection'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az acr login --name ArchitectureDemoACR
          
          # Build
          docker build -t architecture_demo/order-api:v1 backend/OrderApi/
          docker build -t architecture_demo/customer-api:v1 backend/CustomerApi/
          # docker build -t architecture_demo/frontend:v1 frontend/
          
          # Tag based on ACR login path
          docker tag architecture_demo/customer-api:v1 architecturedemoacr.azurecr.io/customer-api:v1
          docker tag architecture_demo/order-api:v1 architecturedemoacr.azurecr.io/order-api:v1
          # docker tag architecture_demo/frontend:v1 architecturedemoacr.azurecr.io/frontend:v1
          
          # Push to ACR
          docker push architecturedemoacr.azurecr.io/customer-api:v1
          docker push architecturedemoacr.azurecr.io/order-api:v1
          # docker push architecturedemoacr.azurecr.io/frontend:v1



#
# Pull images from ACR and deploy
#
#- stage: 'Deploy'
#  displayName: 'Deploy to Azure'
#  dependsOn: Test
#
#  jobs:
#  - deployment: Deploy
#    pool:
#      vmImage: 'ubuntu-latest'
#
#    environment: Dev
#
#    strategy:
#      runOnce:
#        deploy:
#         steps:
