trigger:
- none

pool:
  vmImage: 'ubuntu-latest'

variables:
  tf_var_file_path: '$(System.DefaultWorkingDirectory)/deployment/azure/terraform.tfvars'
  tf_base_infrastructure_path: '$(System.DefaultWorkingDirectory)/deployment/azure/cluster'
  tfstate_storage_account_name: 'architecturedemotfstate' # Custom name!

steps:

- task: TerraformInstaller@0
  displayName: terraform install
  inputs:
    terraformVersion: 'latest'
    
- task: TerraformCLI@0
  displayName: terraform init base infrastructure
  inputs:
    command: 'init'
    workingDirectory: '$(tf_base_infrastructure_path)'
    backendType: 'azurerm'
    backendServiceArm: 'AzureServiceConnection'
    ensureBackend: true
    backendAzureRmResourceGroupName: 'tfstate_resource_group'
    backendAzureRmResourceGroupLocation: 'northeurope'
    backendAzureRmStorageAccountName: '$(tfstate_storage_account_name)'
    backendAzureRmContainerName: 'tfstate_container'
    backendAzureRmKey: 'tfstate_key'
    allowTelemetryCollection: true
    
- task: TerraformCLI@0
  displayName: terraform plan base infrastructure
  inputs:
    command: 'plan'
    workingDirectory: '$(tf_base_infrastructure_path)'
    environmentServiceName: 'AzureServiceConnection'
    commandOptions: '-var-file $(tf_var_file_path)'

- task: TerraformCLI@0
  name: terraformApply
  displayName: terraform apply base infrastructure
  inputs:
    command: 'apply'
    workingDirectory: '$(tf_base_infrastructure_path)'
    environmentServiceName: 'AzureServiceConnection'
    commandOptions: '-var-file $(tf_var_file_path)'

- bash: |
    acr_login_server=$(cat $(terraformApply.jsonOutputVariablesPath) | jq '.cluster_name.value' -r)
    aks_host=$(cat $(terraformApply.jsonOutputVariablesPath) | jq '.aks_host.value' -r)
    echo "##vso[task.setvariable variable=acr_login_server]$acr_login_server"
    echo "##vso[task.setvariable variable=aks_host]$aks_host"

- task: DockerInstaller@0
  displayName: Install Docker
  inputs:
    dockerVersion: '17.09.0-ce'

- task: Docker@2
  displayName: Build CustomerApi and push to ACR
  inputs:
    command: 'buildAndPush'
    containerRegistry: '$(acr_login_server)'
    Dockerfile: '$(System.DefaultWorkingDirectory)/backend/CustomerApi'
    buildContext: '$(System.DefaultWorkingDirectory)/backend/CustomerApi'

#- task: CmdLine@2
#  inputs:
#    script: |
#      az acr login --name ArchitectureDemoACR
#      sh push_images_acr.sh
